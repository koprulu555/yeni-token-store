name: Update Token

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  update-token:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install requests

    - name: Create and run Python script
      run: |
        cat > update_token.py << 'EOF'
        import requests
        import base64
        import json
        from datetime import datetime, timedelta

        def update_token():
            api_url = "https://core-api.kablowebtv.com/api/channels"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Referer": "https://tvheryerde.com",
                "Origin": "https://tvheryerde.com",
                "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbnYiOiJMSVZFIiwiaXBiIjoiMCIsImNnZCI6IjA5M2Q3MjBhLTUwMmMtNDFlZC1hODBmLTJiODE2OTg0ZmI5NSIsImNzaCI6IlRSS1NUIiwiZGN0IjoiRTFDNjQiLCJkaSI6Ijg5MTlmNjYwLTBhZGUtNGYwMS1hMTVlLTc2MDZjNjI4ZTc5MyIsInNnZCI6IjM5MTY0ZjIwLTZlZjUtNDRlZS04ZjAyLWEzODRjOTg1ZTY5MyIsInNwZ2QiOiI5ZjJlYWE1NC01NDM2LTQ0ZTgtYTkyNy00MzQ2NjlkMTU1MWEiLCJpY2giOiIwIiwiaWRtIjoiMCIsImlhIjoiOjpmZmZmOjEwLjAuMC41IiwiYXB2IjoiMS4wLjAiLCJhYm4iOiIxMDAwIiwibmJmIjoxNzQzNDY1MzY5LCJleHAiOjE3NDM0NjU0MjksImlhdCI6MTc0MzNDY1MzY5OX0.YWdVfOL5hEZTrd4f4qkmPCPmUUlaiG7I2REW5H0p6Gw",
                "Accept": "application/json, text/plain, */*",
            }

            try:
                response = requests.get(api_url, headers=headers, timeout=30, verify=False)
                
                if response.status_code != 200:
                    raise Exception(f"HTTP {response.status_code}")
                
                data = response.json()
                
                # Basit ve direkt kontrol
                if not data or 'Data' not in data or 'AllChannels' not in data['Data']:
                    raise Exception("Geçersiz API yanıtı")
                
                # ATV kanalını bul
                for channel in data['Data']['AllChannels']:
                    if 'StreamData' in channel and 'HlsStreamUrl' in channel['StreamData']:
                        stream_url = channel['StreamData']['HlsStreamUrl']
                        if 'atv_stream' in stream_url:
                            break
                else:
                    raise Exception("ATV kanalı bulunamadı")
                
                # Token'i al
                prefix = "https://ottcdn.kablowebtv.net/live_turksat_sub3/atv_stream/index.m3u8?wmsAuthSign="
                token = stream_url[len(prefix):]
                
                # Token'i decode et
                decoded_token = base64.b64decode(token).decode('utf-8')
                
                # Parametreleri parse et
                params = {}
                for pair in decoded_token.split('&'):
                    key, value = pair.split('=', 1)
                    params[key] = value
                
                # Yeni zamanı ayarla (UTC+3)
                new_time = (datetime.utcnow() + timedelta(hours=3)).strftime('%m/%d/%Y %I:%M:%S %p')
                
                # Yeni token string'i oluştur - HİÇBİR ENCODING YAPMADAN!
                new_token_str = f"server_time={new_time}&hash_value={params['hash_value']}&validminutes={params['validminutes']}&id={params['id']}&client_ip=176.88.30.202&checkip={params['checkip']}"
                
                # Base64 encode et
                new_token = base64.b64encode(new_token_str.encode('utf-8')).decode('utf-8')
                
                # Dosyaya yaz
                with open('token.txt', 'w') as f:
                    f.write(new_token)
                
                return new_token
                
            except Exception as e:
                raise Exception(f"{str(e)}")

        try:
            token = update_token()
            print("✓ Token güncellendi")
            print("Token:", token)
            decoded = base64.b64decode(token).decode('utf-8')
            print("Decoded:", decoded)
        except Exception as e:
            print("✗ Hata:", e)
            exit(1)
        EOF

        python update_token.py

    - name: Debug - Show token file
      run: |
        echo "Token:"
        cat token.txt
        echo -e "\nDecoded:"
        base64 -d token.txt

    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add token.txt
        git diff --staged --quiet || git commit -m "Update token - $(date +'%Y-%m-%d %H:%M:%S')"
        git push

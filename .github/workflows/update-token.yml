name: Update Token

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  update-token:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install requests

    - name: Create and run Python script
      run: |
        cat > update_token.py << 'EOF'
        import requests
        import base64
        import json
        from datetime import datetime, timedelta
        import time
        import urllib3
        from urllib3.exceptions import InsecureRequestWarning

        # SSL uyarılarını gizle
        urllib3.disable_warnings(InsecureRequestWarning)

        def update_token():
            api_url = "https://core-api.kablowebtv.com/api/channels"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                "Referer": "https://tvheryerde.com",
                "Origin": "https://tvheryerde.com",
                "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbnYiOiJMSVZFIiwiaXBiIjoiMCIsImNnZCI6IjA5M2Q3MjBhLTUwMmMtNDFlZC1hODBmLTJiODE2OTg0ZmI5NSIsImNzaCI6IlRSS1NUIiwiZGN0IjoiRTFDNjQiLCJkaSI6Ijg5MTlmNjYwLTBhZGUtNGYwMS1hMTVlLTc2MDZjNjI4ZTc5MyIsInNnZCI6IjM5MTY0ZjIwLTZlZjUtNDRlZS04ZjAyLWEzODRjOTg1ZTY5MyIsInNwZ2QiOiI5ZjJlYWE1NC01NDM2LTQ0ZTgtYTkyNy00MzQ2NjlkMTU1MWEiLCJpY2giOiIwIiwiaWRtIjoiMCIsImlhIjoiOjpmZmZmOjEwLjAuMC41IiwiYXB2IjoiMS4wLjAiLCJhYm4iOiIxMDAwIiwibmJmIjoxNzQzNDY1MzY5LCJleHAiOjE3NDM0NjU0MjksImlhdCI6MTc0MzQ2NTM2OX0.YWdVfOL5hEZTrd4f4qkmPCPmUUlaiG7I2REW5H0p6Gw",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7",
            }

            try:
                print("API'ye istek yapılıyor...")
                response = requests.get(api_url, headers=headers, timeout=30, verify=False)
                print(f"HTTP Status: {response.status_code}")
                
                if response.status_code != 200:
                    raise Exception(f"API isteği başarısız: HTTP {response.status_code}")
                
                try:
                    data = response.json()
                except json.JSONDecodeError:
                    raise Exception("JSON parse hatası: Geçersiz JSON yanıtı")
                
                print("API yanıtı alındı, veri yapısı kontrol ediliyor...")
                
                # Daha güvenli veri yapısı kontrolü
                if not data:
                    raise Exception("Boş API yanıtı")
                
                if not isinstance(data, dict):
                    raise Exception(f"Beklenmeyen API yanıt formatı: {type(data)}")
                
                if not data.get('IsSucceeded'):
                    raise Exception(f"API başarısız: {data.get('Message', 'Bilinmeyen hata')}")
                
                if not data.get('Data') or not isinstance(data['Data'], dict):
                    raise Exception("Geçersiz Data yapısı")
                
                all_channels = data['Data'].get('AllChannels')
                if not all_channels or not isinstance(all_channels, list):
                    raise Exception("AllChannels bulunamadı veya liste değil")
                
                print(f"{len(all_channels)} kanal bulundu, ATV aranıyor...")
                
                # ATV kanalını bul
                atv_channel = None
                for channel in all_channels:
                    if not isinstance(channel, dict):
                        continue
                    
                    stream_data = channel.get('StreamData', {})
                    if not isinstance(stream_data, dict):
                        continue
                    
                    stream_url = stream_data.get('HlsStreamUrl', '')
                    if isinstance(stream_url, str) and 'atv_stream' in stream_url:
                        atv_channel = channel
                        break
                
                if not atv_channel:
                    # Tüm kanal isimlerini listele (debug için)
                    channel_names = []
                    for channel in all_channels:
                        if isinstance(channel, dict):
                            channel_names.append(channel.get('Name', 'Unknown'))
                    raise Exception(f"ATV kanalı bulunamadı. Mevcut kanallar: {', '.join(channel_names[:10])}{'...' if len(channel_names) > 10 else ''}")
                
                stream_data = atv_channel.get('StreamData', {})
                stream_url = stream_data.get('HlsStreamUrl', '')
                
                if not stream_url:
                    raise Exception("Stream URL bulunamadı")
                
                prefix = "https://ottcdn.kablowebtv.net/live_turksat_sub3/atv_stream/index.m3u8?wmsAuthSign="
                
                if not stream_url.startswith(prefix):
                    raise Exception(f"ATV URL'si beklenen formatta değil: {stream_url[:100]}...")
                
                # Token'i al
                token = stream_url[len(prefix):]
                
                if not token:
                    raise Exception("Token bulunamadı")
                
                # Token'i decode et
                try:
                    decoded_token = base64.b64decode(token).decode('utf-8')
                except Exception as e:
                    raise Exception(f"Token decode edilemedi: {str(e)}")
                
                print("Token decode edildi, parametreler ayrıştırılıyor...")
                
                # Token parametrelerini parse et
                token_params = {}
                for param in decoded_token.split('&'):
                    if '=' in param:
                        key, value = param.split('=', 1)
                        token_params[key] = value
                
                # Gerekli parametreleri kontrol et
                required_params = ['server_time', 'hash_value', 'validminutes', 'id', 'client_ip', 'checkip']
                for param in required_params:
                    if param not in token_params:
                        raise Exception(f"Gerekli parametre eksik: {param}")
                
                # Yeni zamanı ayarla (Türkiye saati UTC+3)
                turkey_time = datetime.utcnow() + timedelta(hours=3)
                new_server_time = turkey_time.strftime('%m/%d/%Y %I:%M:%S %p')
                
                # Yeni token string'ini oluştur
                new_token_string = f"server_time={new_server_time}&hash_value={token_params['hash_value']}&validminutes={token_params['validminutes']}&id={token_params['id']}&client_ip=176.88.30.202&checkip={token_params['checkip']}"
                
                # Yeni token'i base64 ile encode et
                new_token = base64.b64encode(new_token_string.encode('utf-8')).decode('utf-8')
                
                # Token'i dosyaya yaz
                with open('token.txt', 'w') as f:
                    f.write(new_token)
                
                return new_token
                
            except Exception as e:
                raise Exception(f"API hatası: {str(e)}")

        if __name__ == "__main__":
            try:
                new_token = update_token()
                print(f"✓ Token başarıyla güncellendi")
                print(f"Token: {new_token}")
                
                # Decode edilmiş token'i de göster
                decoded = base64.b64decode(new_token).decode('utf-8')
                print(f"Decode edilmiş: {decoded}")
                
            except Exception as e:
                print(f"✗ HATA: {str(e)}")
                exit(1)
        EOF

        # Scripti çalıştır
        python update_token.py

    - name: Debug - Show token file
      run: |
        echo "Token dosyası içeriği:"
        cat token.txt || echo "Token dosyası oluşturulamadı"
        echo -e "\nDosya boyutu:"
        ls -la token.txt || true
        echo -e "\nDecode edilmiş token:"
        base64 -d token.txt 2>/dev/null || echo "Token decode edilemedi"

    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add token.txt
        git diff --staged --quiet || git commit -m "Update token - $(date +'%Y-%m-%d %H:%M:%S')"
        git push
